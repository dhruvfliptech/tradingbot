# Horizontal Pod Autoscalers for Trading Bot
# ==========================================
# Auto-scaling configurations based on CPU, memory, and custom metrics

# Backend HPA
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: backend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend-deployment
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60
      - type: Pods
        value: 4
        periodSeconds: 60
      selectPolicy: Max

---
# ML Service HPA
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ml-service-hpa
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: ml-service
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ml-service-deployment
  minReplicas: 2
  maxReplicas: 6
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 75
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 85
  - type: Pods
    pods:
      metric:
        name: ml_inference_queue_length
      target:
        type: AverageValue
        averageValue: "10"
  - type: Pods
    pods:
      metric:
        name: ml_model_prediction_latency
      target:
        type: AverageValue
        averageValue: "500m"  # 500ms
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 600  # Longer stabilization for ML workloads
      policies:
      - type: Percent
        value: 25
        periodSeconds: 120
      - type: Pods
        value: 1
        periodSeconds: 120
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 120
      policies:
      - type: Percent
        value: 50
        periodSeconds: 120
      - type: Pods
        value: 2
        periodSeconds: 120
      selectPolicy: Max

---
# Nginx HPA
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: nginx-hpa
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: nginx
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nginx-deployment
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70
  - type: Pods
    pods:
      metric:
        name: nginx_connections_active
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 180
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 30
      selectPolicy: Max

---
# Vertical Pod Autoscaler for RL Service (since it's stateful and can't scale horizontally easily)
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: rl-service-vpa
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: rl-service
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: rl-service-deployment
  updatePolicy:
    updateMode: "Auto"  # Can be "Off", "Initial", or "Auto"
  resourcePolicy:
    containerPolicies:
    - containerName: rl-service
      minAllowed:
        cpu: 1000m
        memory: 1Gi
      maxAllowed:
        cpu: 8000m
        memory: 16Gi
      controlledResources: ["cpu", "memory"]
      controlledValues: RequestsAndLimits

---
# Custom Resource Definition for Trading Metrics (if using custom metrics)
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: tradingmetrics.metrics.trading-bot.com
spec:
  group: metrics.trading-bot.com
  versions:
  - name: v1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            properties:
              metricName:
                type: string
              targetValue:
                type: string
              scaleTargetRef:
                type: object
                properties:
                  apiVersion:
                    type: string
                  kind:
                    type: string
                  name:
                    type: string
          status:
            type: object
            properties:
              currentValue:
                type: string
              lastScaleTime:
                type: string
                format: date-time
  scope: Namespaced
  names:
    plural: tradingmetrics
    singular: tradingmetric
    kind: TradingMetric

---
# Pod Disruption Budget for Backend
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: backend-pdb
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: backend
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: trading-bot
      app.kubernetes.io/component: backend

---
# Pod Disruption Budget for ML Service
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ml-service-pdb
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: ml-service
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: trading-bot
      app.kubernetes.io/component: ml-service

---
# Pod Disruption Budget for Nginx
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: nginx-pdb
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: nginx
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: trading-bot
      app.kubernetes.io/component: nginx

---
# Cluster Autoscaler configuration (annotation-based)
apiVersion: v1
kind: ConfigMap
metadata:
  name: cluster-autoscaler-config
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: autoscaling
data:
  # Node groups configuration for cluster autoscaler
  nodes.alpha.kubernetes.io/node-group-min-size: "3"
  nodes.alpha.kubernetes.io/node-group-max-size: "20"
  cluster-autoscaler.kubernetes.io/scale-down-enabled: "true"
  cluster-autoscaler.kubernetes.io/scale-down-delay-after-add: "10m"
  cluster-autoscaler.kubernetes.io/scale-down-unneeded-time: "10m"
  cluster-autoscaler.kubernetes.io/scale-down-utilization-threshold: "0.5"
  cluster-autoscaler.kubernetes.io/skip-nodes-with-local-storage: "false"
  cluster-autoscaler.kubernetes.io/skip-nodes-with-system-pods: "false"

---
# KEDA ScaledObject for queue-based scaling (if using message queues)
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  name: trading-queue-scaler
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: queue-scaler
spec:
  scaleTargetRef:
    name: backend-deployment
  minReplicaCount: 3
  maxReplicaCount: 15
  triggers:
  - type: redis
    metadata:
      address: redis-service:6379
      password: REDIS_PASSWORD
      listName: trading_signals_queue
      listLength: "5"
  - type: redis
    metadata:
      address: redis-service:6379
      password: REDIS_PASSWORD
      listName: ml_inference_queue
      listLength: "3"
  cooldownPeriod: 300
  pollingInterval: 30