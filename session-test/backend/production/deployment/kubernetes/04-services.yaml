# Services for Trading Bot
# ========================
# Network services for pod communication and load balancing

# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: backend
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: "/metrics"
    prometheus.io/port: "3001"
spec:
  selector:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: backend
  ports:
    - name: http
      port: 3000
      targetPort: 3000
      protocol: TCP
    - name: metrics
      port: 3001
      targetPort: 3001
      protocol: TCP
  type: ClusterIP
  sessionAffinity: None

---
# ML Service
apiVersion: v1
kind: Service
metadata:
  name: ml-service
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: ml-service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: "/metrics"
    prometheus.io/port: "5001"
spec:
  selector:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: ml-service
  ports:
    - name: http
      port: 5000
      targetPort: 5000
      protocol: TCP
    - name: metrics
      port: 5001
      targetPort: 5001
      protocol: TCP
  type: ClusterIP

---
# RL Service
apiVersion: v1
kind: Service
metadata:
  name: rl-service
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: rl-service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: "/metrics"
    prometheus.io/port: "8002"
spec:
  selector:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: rl-service
  ports:
    - name: http
      port: 8001
      targetPort: 8001
      protocol: TCP
    - name: metrics
      port: 8002
      targetPort: 8002
      protocol: TCP
  type: ClusterIP

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: redis
spec:
  selector:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: redis
  ports:
    - name: redis
      port: 6379
      targetPort: 6379
      protocol: TCP
  type: ClusterIP

---
# InfluxDB Service
apiVersion: v1
kind: Service
metadata:
  name: influxdb-service
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: influxdb
spec:
  selector:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: influxdb
  ports:
    - name: http
      port: 8086
      targetPort: 8086
      protocol: TCP
  type: ClusterIP

---
# Nginx Load Balancer Service
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: nginx
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"  # AWS Network Load Balancer
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:region:account:certificate/cert-id"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
spec:
  selector:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: nginx
  ports:
    - name: http
      port: 80
      targetPort: 80
      protocol: TCP
    - name: https
      port: 443
      targetPort: 80
      protocol: TCP
  type: LoadBalancer
  loadBalancerSourceRanges:
    - 0.0.0.0/0  # Restrict this to your IP ranges for security

---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: prometheus
spec:
  selector:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: prometheus
  ports:
    - name: web
      port: 9090
      targetPort: 9090
      protocol: TCP
  type: ClusterIP

---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: grafana
spec:
  selector:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: grafana
  ports:
    - name: web
      port: 3000
      targetPort: 3000
      protocol: TCP
  type: ClusterIP

---
# AlertManager Service
apiVersion: v1
kind: Service
metadata:
  name: alertmanager-service
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: alertmanager
spec:
  selector:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: alertmanager
  ports:
    - name: web
      port: 9093
      targetPort: 9093
      protocol: TCP
  type: ClusterIP

---
# Redis Exporter Service (for Prometheus monitoring)
apiVersion: v1
kind: Service
metadata:
  name: redis-exporter-service
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: redis-exporter
spec:
  selector:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: redis-exporter
  ports:
    - name: metrics
      port: 9121
      targetPort: 9121
      protocol: TCP
  type: ClusterIP

---
# Headless service for StatefulSet services (if needed)
apiVersion: v1
kind: Service
metadata:
  name: redis-headless
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: redis
spec:
  selector:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: redis
  ports:
    - name: redis
      port: 6379
      targetPort: 6379
      protocol: TCP
  clusterIP: None
  type: ClusterIP

---
# External Service for monitoring access (optional)
apiVersion: v1
kind: Service
metadata:
  name: monitoring-external
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: monitoring
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"  # Internal load balancer
spec:
  selector:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: grafana
  ports:
    - name: grafana
      port: 3000
      targetPort: 3000
      protocol: TCP
    - name: prometheus
      port: 9090
      targetPort: 9090
      protocol: TCP
  type: LoadBalancer
  loadBalancerSourceRanges:
    - 10.0.0.0/8      # Internal networks only
    - 172.16.0.0/12
    - 192.168.0.0/16