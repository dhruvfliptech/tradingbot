# RL Service Docker Compose Configuration
# =======================================

version: '3.8'

services:
  # Main RL Service
  rl-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: rl-service
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      # Service configuration
      - HOST=0.0.0.0
      - PORT=8001
      - LOG_LEVEL=info
      - WORKERS=2
      
      # External service URLs
      - TRADING_SERVICE_URL=http://backend:3000
      - DATA_AGGREGATOR_URL=http://backend:3000
      - ADAPTIVE_THRESHOLD_URL=http://ml-service:5000
      
      # Paths
      - MODELS_PATH=/app/models
      - LOGS_PATH=/app/logs
      - DATA_PATH=/app/data
      
      # RL Service specific
      - AB_TESTING_ENABLED=true
      - RL_TRAFFIC_PERCENTAGE=0.1
      - MAX_CONCURRENT_REQUESTS=100
      - PREDICTION_TIMEOUT_SECONDS=5.0
      - FALLBACK_TO_ADAPTIVE_THRESHOLD=true
      
      # Redis (if using for caching)
      - REDIS_URL=redis://redis:6379/0
      
      # Database (if needed for persistence)
      - DATABASE_URL=postgresql://rl_user:rl_password@postgres:5432/rl_service
      
    volumes:
      # Persistent storage for models
      - rl-models:/app/models
      - rl-logs:/app/logs
      - rl-data:/app/data
      
      # Configuration files
      - ./config:/app/config:ro
      
    networks:
      - rl-network
      - trading-network  # Connect to existing trading network
      
    depends_on:
      - redis
      - postgres
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
      
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: rl-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - rl-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL for persistence (optional)
  postgres:
    image: postgres:15-alpine
    container_name: rl-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=rl_user
      - POSTGRES_PASSWORD=rl_password
      - POSTGRES_DB=rl_service
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - rl-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rl_user -d rl_service"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: rl-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - rl-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: rl-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - rl-network

  # Load balancer for high availability (optional)
  nginx:
    image: nginx:alpine
    container_name: rl-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - rl-network
    depends_on:
      - rl-service

# Network definitions
networks:
  rl-network:
    driver: bridge
    name: rl-network
  trading-network:
    external: true  # Connect to existing trading network

# Volume definitions
volumes:
  rl-models:
    name: rl-models
    driver: local
  rl-logs:
    name: rl-logs
    driver: local
  rl-data:
    name: rl-data
    driver: local
  redis-data:
    name: rl-redis-data
    driver: local
  postgres-data:
    name: rl-postgres-data
    driver: local
  prometheus-data:
    name: rl-prometheus-data
    driver: local
  grafana-data:
    name: rl-grafana-data
    driver: local