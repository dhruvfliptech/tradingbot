# RBAC Configuration for Trading Bot
# ==================================
# Role-Based Access Control for secure service access

# Service Account for Trading Bot services
apiVersion: v1
kind: ServiceAccount
metadata:
  name: trading-bot-service-account
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: rbac
automountServiceAccountToken: true

---
# Service Account for Prometheus
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-service-account
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: prometheus
automountServiceAccountToken: true

---
# ClusterRole for Prometheus to access cluster metrics
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-cluster-role
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
# ClusterRoleBinding for Prometheus
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-cluster-role-binding
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-cluster-role
subjects:
- kind: ServiceAccount
  name: prometheus-service-account
  namespace: trading-bot

---
# Role for Trading Bot services within namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: trading-bot-role
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: rbac
rules:
# Pod management
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create"]

# ConfigMap and Secret access
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch"]

# Service discovery
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list", "watch"]

# Persistent Volume Claims
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "watch"]

# Events (for debugging)
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get", "list", "watch"]

# Deployment info (read-only)
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]

# HPA access for self-monitoring
- apiGroups: ["autoscaling"]
  resources: ["horizontalpodautoscalers"]
  verbs: ["get", "list", "watch"]

---
# RoleBinding for Trading Bot services
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: trading-bot-role-binding
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: rbac
subjects:
- kind: ServiceAccount
  name: trading-bot-service-account
  namespace: trading-bot
roleRef:
  kind: Role
  name: trading-bot-role
  apiGroup: rbac.authorization.k8s.io

---
# Role for CI/CD deployment
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: trading-bot-deployer
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: cicd
rules:
# Full access to deployments for rolling updates
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets", "statefulsets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

# ConfigMap and Secret management
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

# Service management
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]

# Pod management for deployment validation
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch", "delete"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get", "list"]

# HPA management
- apiGroups: ["autoscaling"]
  resources: ["horizontalpodautoscalers"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]

# Ingress management
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]

# PVC management
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]

# Job management for migrations
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
# Service Account for CI/CD
apiVersion: v1
kind: ServiceAccount
metadata:
  name: trading-bot-deployer
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: cicd
automountServiceAccountToken: false  # Token will be provided externally

---
# RoleBinding for CI/CD deployer
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: trading-bot-deployer-binding
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: cicd
subjects:
- kind: ServiceAccount
  name: trading-bot-deployer
  namespace: trading-bot
roleRef:
  kind: Role
  name: trading-bot-deployer
  apiGroup: rbac.authorization.k8s.io

---
# Security Context Constraints (for OpenShift)
apiVersion: security.openshift.io/v1
kind: SecurityContextConstraints
metadata:
  name: trading-bot-scc
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: security
allowHostDirVolumePlugin: false
allowHostIPC: false
allowHostNetwork: false
allowHostPID: false
allowHostPorts: false
allowPrivilegedContainer: false
allowedCapabilities: []
defaultAddCapabilities: []
requiredDropCapabilities:
- ALL
allowedFlexVolumes: []
fsGroup:
  type: MustRunAs
  ranges:
  - min: 1000
    max: 65535
readOnlyRootFilesystem: true
runAsUser:
  type: MustRunAs
  uid: 1000
seLinuxContext:
  type: RunAsAny
supplementalGroups:
  type: MustRunAs
  ranges:
  - min: 1000
    max: 65535
volumes:
- configMap
- downwardAPI
- emptyDir
- persistentVolumeClaim
- projected
- secret
users:
- system:serviceaccount:trading-bot:trading-bot-service-account

---
# Network Policy for namespace isolation
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: trading-bot-network-policy
  namespace: trading-bot
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: security
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Allow traffic from within namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: trading-bot
  # Allow traffic from ingress controllers
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
  # Allow traffic from monitoring namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
  # Allow external traffic to nginx service
  - from: []
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
  # Allow traffic within namespace
  - to:
    - namespaceSelector:
        matchLabels:
          name: trading-bot
  # Allow external API calls (trading APIs, etc.)
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
# Pod Security Policy (deprecated in favor of Pod Security Standards)
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: trading-bot-psp
  labels:
    app.kubernetes.io/name: trading-bot
    app.kubernetes.io/component: security
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  readOnlyRootFilesystem: true