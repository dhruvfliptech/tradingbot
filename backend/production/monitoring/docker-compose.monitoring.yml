# Docker Compose for Trading Bot Monitoring Stack
# Complete observability solution with Prometheus, Grafana, and alerting

version: '3.8'

networks:
  monitoring:
    driver: bridge
  trading-network:
    external: true

volumes:
  prometheus_data:
  grafana_data:
  alertmanager_data:
  loki_data:

services:
  # Prometheus - Metrics collection and storage
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: trading-prometheus
    restart: unless-stopped
    networks:
      - monitoring
      - trading-network
    ports:
      - "9090:9090"
    volumes:
      - ./alert_rules.yaml:/etc/prometheus/rules/alert_rules.yaml:ro
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
      - '--query.max-concurrency=50'
      - '--query.timeout=2m'
      - '--web.external-url=http://localhost:9090'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "monitoring.service=prometheus"
      - "monitoring.component=metrics"

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana-oss:10.1.0
    container_name: trading-grafana
    restart: unless-stopped
    networks:
      - monitoring
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana_dashboards:/var/lib/grafana/dashboards:ro
      - ./grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml:ro
      - ./grafana-dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml:ro
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
      - GF_FEATURE_TOGGLES_ENABLE=ngalert
      - GF_UNIFIED_ALERTING_ENABLED=true
      - GF_ALERTING_ENABLED=false
      - GF_SMTP_ENABLED=${GRAFANA_SMTP_ENABLED:-false}
      - GF_SMTP_HOST=${GRAFANA_SMTP_HOST:-localhost:587}
      - GF_SMTP_USER=${GRAFANA_SMTP_USER:-}
      - GF_SMTP_PASSWORD=${GRAFANA_SMTP_PASSWORD:-}
      - GF_SMTP_FROM_ADDRESS=${GRAFANA_SMTP_FROM:-grafana@tradingbot.local}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "monitoring.service=grafana"
      - "monitoring.component=visualization"

  # Alertmanager - Alert routing and notifications
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: trading-alertmanager
    restart: unless-stopped
    networks:
      - monitoring
    ports:
      - "9093:9093"
    volumes:
      - alertmanager_data:/alertmanager
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--log.level=info'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "monitoring.service=alertmanager"
      - "monitoring.component=alerts"

  # Loki - Log aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: trading-loki
    restart: unless-stopped
    networks:
      - monitoring
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ./loki-config.yaml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "monitoring.service=loki"
      - "monitoring.component=logs"

  # Promtail - Log collection agent
  promtail:
    image: grafana/promtail:2.9.0
    container_name: trading-promtail
    restart: unless-stopped
    networks:
      - monitoring
    volumes:
      - ./promtail-config.yaml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    labels:
      - "monitoring.service=promtail"
      - "monitoring.component=log-collection"

  # cAdvisor - Container monitoring
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: trading-cadvisor
    restart: unless-stopped
    networks:
      - monitoring
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "monitoring.service=cadvisor"
      - "monitoring.component=container-metrics"

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:v1.6.0
    container_name: trading-node-exporter
    restart: unless-stopped
    networks:
      - monitoring
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.cpu'
      - '--collector.diskstats'
      - '--collector.filesystem'
      - '--collector.loadavg'
      - '--collector.meminfo'
      - '--collector.netdev'
      - '--collector.netstat'
      - '--collector.stat'
      - '--collector.time'
      - '--collector.uname'
      - '--collector.vmstat'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "monitoring.service=node-exporter"
      - "monitoring.component=system-metrics"

  # Redis for caching and metrics
  redis:
    image: redis:7.0-alpine
    container_name: trading-redis
    restart: unless-stopped
    networks:
      - monitoring
      - trading-network
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "monitoring.service=redis"
      - "monitoring.component=cache"

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:v1.52.0
    container_name: trading-redis-exporter
    restart: unless-stopped
    networks:
      - monitoring
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9121/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "monitoring.service=redis-exporter"
      - "monitoring.component=redis-metrics"

  # Trading Bot Metrics Exporter
  trading-metrics-exporter:
    build:
      context: .
      dockerfile: Dockerfile.metrics
    container_name: trading-metrics-exporter
    restart: unless-stopped
    networks:
      - monitoring
      - trading-network
    ports:
      - "8000:8000"
    environment:
      - PROMETHEUS_PORT=8000
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/tradingbot}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-}
      - TELEGRAM_CHAT_IDS=${TELEGRAM_CHAT_IDS:-}
    volumes:
      - ./prometheus_exporter.py:/app/prometheus_exporter.py:ro
      - ./telegram_bot.py:/app/telegram_bot.py:ro
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8000/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "monitoring.service=trading-metrics"
      - "monitoring.component=trading-metrics"

  # Health Check Service
  health-checker:
    build:
      context: .
      dockerfile: Dockerfile.health
    container_name: trading-health-checker
    restart: unless-stopped
    networks:
      - monitoring
      - trading-network
    ports:
      - "8080:8080"
    environment:
      - HEALTH_CHECK_PORT=8080
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/tradingbot}
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./health_check.py:/app/health_check.py:ro
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "monitoring.service=health-checker"
      - "monitoring.component=health"

  # Jaeger - Distributed tracing (optional)
  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: trading-jaeger
    restart: unless-stopped
    networks:
      - monitoring
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:14269/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "monitoring.service=jaeger"
      - "monitoring.component=tracing"

volumes:
  redis_data:

# Configuration files that need to be created alongside this docker-compose.yml:

# prometheus.yml - Prometheus configuration
# alertmanager.yml - Alertmanager configuration  
# loki-config.yaml - Loki configuration
# promtail-config.yaml - Promtail configuration
# grafana-datasources.yaml - Grafana datasources
# grafana-dashboards.yaml - Grafana dashboard provisioning
# Dockerfile.metrics - Docker file for metrics exporter
# Dockerfile.health - Docker file for health checker

# Environment variables to set:
# - GRAFANA_ADMIN_USER
# - GRAFANA_ADMIN_PASSWORD  
# - TELEGRAM_BOT_TOKEN
# - TELEGRAM_CHAT_IDS
# - DATABASE_URL
# - GRAFANA_SMTP_* (optional for email alerts)

# Usage:
# 1. Set environment variables in .env file
# 2. Create configuration files (examples provided below)
# 3. Run: docker-compose -f docker-compose.monitoring.yml up -d
# 4. Access:
#    - Grafana: http://localhost:3000
#    - Prometheus: http://localhost:9090  
#    - Alertmanager: http://localhost:9093
#    - Health Checks: http://localhost:8080
#    - Trading Metrics: http://localhost:8000/metrics

# Monitoring stack provides:
# - Real-time metrics collection and storage
# - Rich dashboards for trading, system, risk, and ML metrics
# - Intelligent alerting with Telegram notifications
# - Log aggregation and analysis
# - Container and system monitoring
# - Health checking for all components
# - Distributed tracing capabilities