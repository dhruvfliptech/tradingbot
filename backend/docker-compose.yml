version: '3.8'

services:
  # Main Backend API
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=${DATABASE_URL}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - ALPACA_API_KEY=${ALPACA_API_KEY}
      - ALPACA_SECRET_KEY=${ALPACA_SECRET_KEY}
      - COINGECKO_API_KEY=${COINGECKO_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - COMPOSER_MCP_URL=${COMPOSER_MCP_URL:-https://ai.composer.trade/mcp}
      - ML_SERVICE_URL=http://ml-service:5000
    depends_on:
      - redis
      - influxdb
      - ml-service
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    networks:
      - trading-network

  # ML Service for AdaptiveThreshold
  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile.ml-service
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - COMPOSER_MCP_URL=${COMPOSER_MCP_URL:-https://ai.composer.trade/mcp}
    restart: unless-stopped
    volumes:
      - ./ml-service/models:/app/models
      - ./logs:/app/logs
    networks:
      - trading-network

  # Redis for queues and caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    networks:
      - trading-network

  # InfluxDB for time series data
  influxdb:
    image: influxdb:2.7-alpine
    ports:
      - "8086:8086"
    environment:
      - INFLUXDB_DB=trading_bot
      - INFLUXDB_ADMIN_USER=admin
      - INFLUXDB_ADMIN_PASSWORD=${INFLUXDB_PASSWORD}
      - INFLUXDB_USER=trader
      - INFLUXDB_USER_PASSWORD=${INFLUXDB_USER_PASSWORD}
    volumes:
      - influxdb_data:/var/lib/influxdb2
    restart: unless-stopped
    networks:
      - trading-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - trading-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - trading-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - trading-network

  # Composer MCP Proxy (Optional - for local development)
  composer-mcp-proxy:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./composer-proxy.conf:/etc/nginx/nginx.conf:ro
    restart: unless-stopped
    networks:
      - trading-network
    profiles:
      - development

networks:
  trading-network:
    driver: bridge

volumes:
  redis_data:
  influxdb_data:
  prometheus_data:
  grafana_data: